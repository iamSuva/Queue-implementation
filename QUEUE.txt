
*****************************
*******************************************
//queue implementation using array
*************************************************

#include<iostream>
using namespace std;
#define n 3
class queue{
    int *arr;
    int front,back;
    public:
    queue()
    {
        arr=new int[n];
        front=-1;
        back=-1;
    }
    void push(int x);
    
    void pop();
    void peek();
    void isempty();
};
void queue::push(int x)
{
        if(back==n-1)
        {
            cout<<"queue is overflow\n";
            
        }
        if(front==-1 && back==-1)
        {
            front++;
            back++;
            arr[back]=x;
        }
        else{
            back++;
            arr[back]=x;
        }
        
        
}
void queue::pop(){
    if(front==-1 || front > back)
    {
        cout<<"queue is empty\n";
        return;
    }
    else{
        front++;
    }
}
void queue::peek()
{
    if(front==-1 || front>back)
    {
        cout<<"queue is empty\n";
    }
    else {
        cout<<"peek element is :"<<arr[front]<<"\n";
    }
}
void queue::isempty()
{
     if(front==-1 || front > back)
    {
        cout<<"queue is empty\n";
        return;
    }
    else{
        cout<<"not empty\n";
    }
}
int main()
{
    queue q;
    q.push(10);
    q.push(20);
    q.push(30);
    q.push(40);
    q.peek();
    // q.pop();
    // q.peek();
    // q.isempty();
    // q.pop();
    // q.pop();
    // q.peek();
    // q.pop();
    q.isempty();
}

*****************************
*******************************************
//queue implementation using linked list
*************************************************

#include<iostream>
using namespace std;
class node{
    public:
    int data;
    node *next;
    node(int val)
    {
        data=val;
        next=NULL;
    }
};
class queue{
    node *front;
    node *back;
    public:
    queue(){
        front=NULL;
        back=NULL;
    }
    void push(int x)
    {
        node *newnode=new node(x);
        if(front==NULL)
        {
            front=newnode;
            back=newnode;
            
            
        }
        else{
            back->next=newnode;
            back=newnode;
            
        }
    }
    void pop(){
        if(front==NULL)
        {
            cout<<"queue is underflow\n";
        }
        else{
            node *temp=front;
            front=front->next;
            delete temp;
        }
    }
    void peek(){
         if(front==NULL)
        {
            cout<<"queue is underflow\n";
        }
        else{
            cout<<"peek element is : "<<front->data<<"\n";
        }
    }
    void empty()
    {
        if(front==NULL)
        {
            cout<<"queue is empty\n";
        }
        else
        {
            cout<<"not empty\n";
        }
    }
};

int main(){
    queue q;
    q.push(10);
    q.push(20);
    q.push(30);
    q.push( 40);
    q.peek();
    q.pop();
    q.empty();
    q.pop();
    q.pop();
    q.pop();
    q.empty();
}